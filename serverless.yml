service: personasim-backend

frameworkVersion: '4'

# 禁用内置 ESBuild 以使用 serverless-esbuild 插件
build:
  esbuild: false

provider:
  name: aws
  runtime: nodejs20.x
  region: ${opt:region, 'ap-southeast-1'}
  stage: ${opt:stage, 'dev'}
  architecture: arm64
  memorySize: 512
  timeout: 30

  # 环境变量
  environment:
    STAGE: ${self:provider.stage}
    LOG_LEVEL: ${self:custom.logLevel.${self:provider.stage}, 'info'}
    NODE_OPTIONS: --enable-source-maps
    MAIN_TABLE_NAME: ${self:custom.mainTableName}
    CONTENT_BUCKET_NAME: ${self:service}-content-${self:provider.stage}
    ANALYSIS_QUEUE_URL:
      Ref: AnalysisQueue

  # IAM 权限
  iam:
    role:
      statements:
        # DynamoDB 权限
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - !GetAtt MainTable.Arn
            - !Sub '${MainTable.Arn}/index/*'

        # S3 权限
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource:
            - !Sub '${ContentBucket.Arn}/*'

        # SQS 权限
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - !GetAtt AnalysisQueue.Arn

        # X-Ray 追踪权限
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource: '*'

  # 日志配置
  logs:
    httpApi: true

  # HTTP API 配置
  httpApi:
    cors:
      allowedOrigins:
        - '*'
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Api-Key
        - X-Amz-Date
        - X-Amz-Security-Token
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      maxAge: 86400

  # 启用 X-Ray 追踪
  tracing:
    lambda: true
    apiGateway: true

# 自定义变量
custom:
  mainTableName: ${self:service}-main-${self:provider.stage}

  # 根据环境设置日志级别
  logLevel:
    dev: debug
    staging: info
    prod: info

  # esbuild 配置
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    exclude:
      - '@aws-sdk/*'
    target: node20
    platform: node
    format: cjs

# Lambda 函数定义
functions:
  # 健康检查
  healthCheck:
    handler: src/functions/health/check.handler
    description: 健康检查端点
    events:
      - httpApi:
          path: /health
          method: GET

  # Sessions 相关端点
  getUploadUrl:
    handler: src/functions/sessions/get-upload-url.handler
    description: 获取 S3 预签名上传 URL
    events:
      - httpApi:
          path: /sessions/upload-url
          method: POST

  analyzeSession:
    handler: src/functions/sessions/analyze.handler
    description: 触发分析会话
    timeout: 600
    events:
      - httpApi:
          path: /sessions/analyze
          method: POST

  listSessions:
    handler: src/functions/sessions/list.handler
    description: 获取会话列表
    events:
      - httpApi:
          path: /sessions
          method: GET

  getSession:
    handler: src/functions/sessions/get.handler
    description: 获取会话详情
    events:
      - httpApi:
          path: /sessions/{sessionId}
          method: GET

  # Users 相关端点
  listUsers:
    handler: src/functions/users/list.handler
    description: 获取会话的用户列表
    events:
      - httpApi:
          path: /sessions/{sessionId}/users
          method: GET

  getUser:
    handler: src/functions/users/get.handler
    description: 获取用户详情
    events:
      - httpApi:
          path: /sessions/{sessionId}/users/{userId}
          method: GET

  # Worker 函数
  analyzeWorker:
    handler: src/functions/workers/analyze-worker.handler
    description: 处理 AI 分析任务的 Worker
    timeout: 600
    memorySize: 1024
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AnalysisQueue
              - Arn
          batchSize: 1

# CloudFormation 资源
resources:
  Resources:
    # 主数据表
    MainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.mainTableName}
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    # S3 存储桶 - 存储上传的内容图片
    ContentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-content-${self:provider.stage}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
              AllowedHeaders:
                - '*'
              MaxAge: 3000
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldContent
              Status: Enabled
              ExpirationInDays: 90
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    # SQS 队列 - AI 分析任务队列
    AnalysisQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-analysis-queue-${self:provider.stage}
        VisibilityTimeout: 900
        MessageRetentionPeriod: 1209600
        ReceiveMessageWaitTimeSeconds: 20
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

# 插件
plugins:
  - serverless-esbuild
